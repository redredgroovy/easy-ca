#!/bin/bash
# Created by Peter Novotny based on Derek Moore <derek.moore@gmail.com> server part

usage() {
    echo "Usage: $0 -s SERVER_NAME [-a ALT_NAME] [-A]..."
    echo "Issues a server and client certificate for SERVER_NAME as one file"
    echo
    echo "Options:"
    echo "    -s SERVER_NAME  Server hostname (commonName) for the new cert"
    echo "    -a ALT_NAME     One (or more) subjectAltNames for the new cert (optional)"
    echo "    -A              Automateion mode, password read from env_variable EASY_CA_PASS"
    echo
    exit 2
}

SERVER_NAME=
ALT_NAME=
AUTOMODE=false
OPENSSH_ADDITIONAL_PARAMETERS=""

while getopts As:a: FLAG; do
    case $FLAG in
        s) SERVER_NAME=${OPTARG}
           if [ -z "${ALT_NAME}" ]; then
               ALT_NAME="DNS:${OPTARG}"
           else
               ALT_NAME="${ALT_NAME}, DNS:${OPTARG}"
           fi
           ;;
        a) if [ -z "${ALT_NAME}" ]; then
               ALT_NAME="DNS:${OPTARG}"
           else
               ALT_NAME="${ALT_NAME}, DNS:${OPTARG}"
           fi
           ;;
        A) AUTOMODE=true ;;
        *) usage
           ;;
    esac
done

if [ "${SERVER_NAME}" == "" ]; then
    echo "ERROR: Server client name empty"
    usage
fi

BIN_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
source ${BIN_DIR}/functions
source ${BIN_DIR}/defaults.conf

# Sanitize the commonName to make it suitable for use in filenames
SAFE_NAME=`echo ${SERVER_NAME} | sed 's/\*/star/g'`
SAFE_NAME=`echo ${SAFE_NAME} | sed 's/[^A-Za-z0-9-]/-/g'`

echo
echo "Creating new SSL server client certificate for:"
echo "commonName: ${SERVER_NAME}"
echo "subjectAltName: ${ALT_NAME}"
echo

pushd ${BIN_DIR}/.. > /dev/null

if [ "${AUTOMODE}" = true ] ; then
    if [ -z "${EASY_CA_PASS}" ] ; then
        echo "ERROR: Automode set but no (or empty) password provided"
        exit 1
    else
        export OPENSSH_ADDITIONAL_PARAMETERS="-batch"
        export CA_PASS=${EASY_CA_PASS}
    fi
else
    echo -n "Enter passphase for signing CA key: "
    read -s PASS
    echo
    export CA_PASS=${PASS}
fi

# Generate the server openssl config
export CA_HOSTNAME=${SERVER_NAME}
export SAN=${ALT_NAME}
if [ -f conf/${SAFE_NAME}.server_client.conf ]; then
    echo "WARNING: Configuration already exists for ${SAFE_NAME}"
else
    template "${BIN_DIR}/templates/server_client.tpl" "conf/${SAFE_NAME}.server_client.conf"
    echo "Template conf/${SAFE_NAME}.server_client.conf created "
fi

# Create the server key and csr
if [ -f csr/${SAFE_NAME}.server_client.csr ]; then
    echo "WARNING: CSR already exists for ${SAFE_NAME}."
else 
    openssl req -new -nodes ${OPENSSH_ADDITIONAL_PARAMETERS} \
                -config conf/${SAFE_NAME}.server_client.conf \
                -keyout private/${SAFE_NAME}.server_client.key \
                -out csr/${SAFE_NAME}.server_client.csr
    chmod 0400 private/${SAFE_NAME}.server_client.key
    echo "Server client CSR created csr/${SAFE_NAME}.server_client.csr"
fi

# Create the server certificate
if [ -f certs/${SAFE_NAME}.server_client.crt ]; then
    echo "WARNING: CRT already exists for ${SAFE_NAME}"
else 
    openssl ca -batch -notext \
               -config conf/ca.conf \
               -in csr/${SAFE_NAME}.server_client.csr \
               -out certs/${SAFE_NAME}.server_client.crt \
               -days 3650 \
               -extensions server_client_ext \
               -passin env:CA_PASS
    echo "Server client CRT created certs/${SAFE_NAME}.server_client.crt"
fi

popd > /dev/null

echo
echo "Server certificate created."
echo

